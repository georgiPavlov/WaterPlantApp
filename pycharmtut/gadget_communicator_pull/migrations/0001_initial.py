# Generated by Django 4.2.24 on 2025-09-29 09:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BasicPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the watering plan', max_length=100, unique=True, verbose_name='Plan Name')),
                ('plan_type', models.CharField(choices=[('basic', 'Basic Plan')], default='basic', help_text='Type of watering plan', max_length=20, verbose_name='Plan Type')),
                ('water_volume', models.PositiveIntegerField(default=100, help_text='Volume of water to deliver in milliliters (50-2000ml)', verbose_name='Water Volume (ml)')),
                ('has_been_executed', models.BooleanField(default=False, help_text='Whether this plan has been executed', verbose_name='Executed')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this plan was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this plan was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Basic Plan',
                'verbose_name_plural': 'Basic Plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(help_text='Unique identifier for the device', max_length=100, unique=True, verbose_name='Device ID')),
                ('label', models.CharField(help_text='Human-readable name for the device', max_length=100, verbose_name='Device Label')),
                ('water_level', models.PositiveIntegerField(default=100, help_text='Current water level percentage (0-100)', verbose_name='Water Level (%)')),
                ('moisture_level', models.PositiveIntegerField(default=0, help_text='Current moisture level percentage (0-100)', verbose_name='Moisture Level (%)')),
                ('water_container_capacity', models.PositiveIntegerField(default=2000, help_text='Maximum water capacity in milliliters', verbose_name='Water Capacity (ml)')),
                ('water_reset', models.BooleanField(default=False, help_text='Whether water level needs to be reset', verbose_name='Water Reset Required')),
                ('send_email', models.BooleanField(default=True, help_text='Whether to send email notifications', verbose_name='Email Notifications')),
                ('is_connected', models.BooleanField(default=False, help_text='Whether the device is currently connected', verbose_name='Connected')),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('maintenance', 'Maintenance'), ('error', 'Error')], default='offline', help_text='Current device status', max_length=20, verbose_name='Status')),
                ('last_seen', models.DateTimeField(blank=True, help_text='When the device was last seen online', null=True, verbose_name='Last Seen')),
                ('location', models.CharField(blank=True, help_text='Physical location of the device', max_length=200, verbose_name='Location')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the device', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this device was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this device was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
                'ordering': ['device_id'],
            },
        ),
        migrations.CreateModel(
            name='HealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_status', models.BooleanField(default=False)),
                ('message', models.CharField(max_length=120)),
                ('status_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('status_time', models.CharField(default='', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='MoisturePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the watering plan', max_length=100, unique=True, verbose_name='Plan Name')),
                ('plan_type', models.CharField(choices=[('moisture', 'Moisture Plan')], default='moisture', help_text='Type of watering plan', max_length=20, verbose_name='Plan Type')),
                ('water_volume', models.PositiveIntegerField(default=150, help_text='Volume of water to deliver in milliliters (50-2000ml)', verbose_name='Water Volume (ml)')),
                ('moisture_threshold', models.FloatField(default=0.4, help_text='Moisture threshold for watering (0.0-1.0, where 0.4 = 40%)', verbose_name='Moisture Threshold')),
                ('check_interval', models.PositiveIntegerField(default=30, help_text='Interval between moisture checks in minutes (5-1440)', verbose_name='Check Interval (minutes)')),
                ('is_running', models.BooleanField(default=False, help_text='Whether the plan is currently active', verbose_name='Running')),
                ('has_been_executed', models.BooleanField(default=False, help_text='Whether this plan has been executed', verbose_name='Executed')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this plan was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this plan was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Moisture Plan',
                'verbose_name_plural': 'Moisture Plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PhotoModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('image', models.ImageField(null=True, upload_to='images/')),
                ('photo_status', models.CharField(default='Initialized', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_status', models.BooleanField(default=False, help_text='Whether the watering operation was successful', verbose_name='Execution Status')),
                ('message', models.CharField(help_text='Status message describing the result', max_length=500, verbose_name='Status Message')),
                ('status_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this status', unique=True, verbose_name='Status ID')),
                ('status_time', models.DateTimeField(auto_now_add=True, help_text='When this status was created', verbose_name='Status Time')),
                ('status_type', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('warning', 'Warning'), ('info', 'Information')], default='info', help_text='Type of status message', max_length=20, verbose_name='Status Type')),
                ('device_id', models.CharField(blank=True, help_text='ID of the device that generated this status', max_length=100, null=True, verbose_name='Device ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this status was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this status was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Statuses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TimePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the watering plan', max_length=100, unique=True, verbose_name='Plan Name')),
                ('plan_type', models.CharField(choices=[('time_based', 'Time-based Plan')], default='time_based', help_text='Type of watering plan', max_length=20, verbose_name='Plan Type')),
                ('water_volume', models.PositiveIntegerField(default=180, help_text='Volume of water to deliver in milliliters (50-2000ml)', verbose_name='Water Volume (ml)')),
                ('execute_only_once', models.BooleanField(default=False, help_text='Whether the plan should execute only once', verbose_name='Execute Only Once')),
                ('is_running', models.BooleanField(default=False, help_text='Whether the plan is currently active', verbose_name='Running')),
                ('has_been_executed', models.BooleanField(default=False, help_text='Whether this plan has been executed', verbose_name='Executed')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this plan was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this plan was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Time Plan',
                'verbose_name_plural': 'Time Plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WaterTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week for watering', verbose_name='Weekday')),
                ('time_water', models.CharField(help_text='Time to water in HH:MM format (24-hour)', max_length=5, verbose_name='Watering Time')),
                ('is_in_use', models.BooleanField(default=True, help_text='Whether this time slot is currently active', verbose_name='In Use')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this time was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this time was last updated', verbose_name='Updated At')),
                ('time_plan', models.ForeignKey(blank=True, help_text='Associated time-based plan', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weekday_times', to='gadget_communicator_pull.timeplan', verbose_name='Time Plan')),
            ],
            options={
                'verbose_name': 'Water Time',
                'verbose_name_plural': 'Water Times',
                'ordering': ['weekday', 'time_water'],
            },
        ),
        migrations.CreateModel(
            name='WaterChart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_level', models.PositiveIntegerField(help_text='Water level percentage (0-100)', verbose_name='Water Level (%)')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, help_text='When this data point was recorded', verbose_name='Recorded At')),
                ('device', models.ForeignKey(help_text='Associated device', on_delete=django.db.models.deletion.CASCADE, related_name='water_charts', to='gadget_communicator_pull.device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'Water Chart',
                'verbose_name_plural': 'Water Charts',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='timeplan',
            index=models.Index(fields=['name'], name='gadget_comm_name_a86f38_idx'),
        ),
        migrations.AddIndex(
            model_name='timeplan',
            index=models.Index(fields=['plan_type'], name='gadget_comm_plan_ty_2afa98_idx'),
        ),
        migrations.AddIndex(
            model_name='timeplan',
            index=models.Index(fields=['is_running'], name='gadget_comm_is_runn_e74b55_idx'),
        ),
        migrations.AddIndex(
            model_name='timeplan',
            index=models.Index(fields=['has_been_executed'], name='gadget_comm_has_bee_03ce70_idx'),
        ),
        migrations.AddIndex(
            model_name='timeplan',
            index=models.Index(fields=['created_at'], name='gadget_comm_created_54f1df_idx'),
        ),
        migrations.AddIndex(
            model_name='status',
            index=models.Index(fields=['execution_status'], name='gadget_comm_executi_ba7931_idx'),
        ),
        migrations.AddIndex(
            model_name='status',
            index=models.Index(fields=['status_type'], name='gadget_comm_status__a30c89_idx'),
        ),
        migrations.AddIndex(
            model_name='status',
            index=models.Index(fields=['device_id'], name='gadget_comm_device__ea3cd3_idx'),
        ),
        migrations.AddIndex(
            model_name='status',
            index=models.Index(fields=['created_at'], name='gadget_comm_created_cd64d4_idx'),
        ),
        migrations.AddIndex(
            model_name='status',
            index=models.Index(fields=['status_id'], name='gadget_comm_status__5af055_idx'),
        ),
        migrations.AddIndex(
            model_name='moistureplan',
            index=models.Index(fields=['name'], name='gadget_comm_name_f91a1a_idx'),
        ),
        migrations.AddIndex(
            model_name='moistureplan',
            index=models.Index(fields=['plan_type'], name='gadget_comm_plan_ty_2f7749_idx'),
        ),
        migrations.AddIndex(
            model_name='moistureplan',
            index=models.Index(fields=['is_running'], name='gadget_comm_is_runn_b42252_idx'),
        ),
        migrations.AddIndex(
            model_name='moistureplan',
            index=models.Index(fields=['has_been_executed'], name='gadget_comm_has_bee_738b92_idx'),
        ),
        migrations.AddIndex(
            model_name='moistureplan',
            index=models.Index(fields=['created_at'], name='gadget_comm_created_797219_idx'),
        ),
        migrations.AddField(
            model_name='device',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='User who owns this device', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddIndex(
            model_name='basicplan',
            index=models.Index(fields=['name'], name='gadget_comm_name_be32ba_idx'),
        ),
        migrations.AddIndex(
            model_name='basicplan',
            index=models.Index(fields=['plan_type'], name='gadget_comm_plan_ty_740cf6_idx'),
        ),
        migrations.AddIndex(
            model_name='basicplan',
            index=models.Index(fields=['has_been_executed'], name='gadget_comm_has_bee_7efa51_idx'),
        ),
        migrations.AddIndex(
            model_name='basicplan',
            index=models.Index(fields=['created_at'], name='gadget_comm_created_6795a3_idx'),
        ),
        migrations.AddIndex(
            model_name='watertime',
            index=models.Index(fields=['weekday'], name='gadget_comm_weekday_080f34_idx'),
        ),
        migrations.AddIndex(
            model_name='watertime',
            index=models.Index(fields=['time_water'], name='gadget_comm_time_wa_820eca_idx'),
        ),
        migrations.AddIndex(
            model_name='watertime',
            index=models.Index(fields=['is_in_use'], name='gadget_comm_is_in_u_1cf7f1_idx'),
        ),
        migrations.AddIndex(
            model_name='watertime',
            index=models.Index(fields=['created_at'], name='gadget_comm_created_16920b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='watertime',
            unique_together={('weekday', 'time_water', 'time_plan')},
        ),
        migrations.AddIndex(
            model_name='waterchart',
            index=models.Index(fields=['device', 'recorded_at'], name='gadget_comm_device__bfd711_idx'),
        ),
        migrations.AddIndex(
            model_name='waterchart',
            index=models.Index(fields=['water_level'], name='gadget_comm_water_l_0f4c95_idx'),
        ),
        migrations.AddIndex(
            model_name='waterchart',
            index=models.Index(fields=['recorded_at'], name='gadget_comm_recorde_5cc017_idx'),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['device_id'], name='gadget_comm_device__1707bf_idx'),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['is_connected'], name='gadget_comm_is_conn_fda673_idx'),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['status'], name='gadget_comm_status_eb9a58_idx'),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['last_seen'], name='gadget_comm_last_se_4cd1c0_idx'),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['created_at'], name='gadget_comm_created_72aa30_idx'),
        ),
    ]
